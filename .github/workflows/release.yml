name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: "Checkout"
        uses: actions/checkout@v2
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: "Set up Entando Nexus Repository"
        uses: actions/setup-java@v1
        with:
          java-version: 11
          server-id: ng-pipelines
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
      - name: "Publish package"
        run: |
          mvn --batch-mode deploy -X
        env:
          MAVEN_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
      - name: "Update entando-core-bom"
        id: entando-core-bom-update
        env:
          ENTANDO_CORE_BOM_FOLDER: "entando-core-bom"
          ENTANDO_CORE_BOM_REPO_URL: "https://github.com/entando-ngpl/entando-core-bom.git"
          TOKEN_SECRET: ${{ secrets.NGPL_TOKEN }}
        run: |
          tagValue=$(echo "${{ github.ref }}" | sed 's/.*\///' | sed 's/^v\(.*\)/\1/')
          echo "TAG VALUE $tagValue"

          # install xmlstarlet
          sudo apt-get install xmlstarlet &> /dev/null
          echo "xmlstarlet installed"

          # get the current artifact version in the entando-core-bom pom.xml file
          artifactId=$(xmlstarlet sel -N pom="http://maven.apache.org/POM/4.0.0" -t \
            -m "/pom:project" \
            -v "./pom:artifactId" pom.xml)

          echo "##### ARTIFACT ID $artifactId"

          # clone entando-core-bom
          mkdir "$ENTANDO_CORE_BOM_FOLDER" && cd "$ENTANDO_CORE_BOM_FOLDER"
          authUrl=$(echo "$ENTANDO_CORE_BOM_REPO_URL" | sed "s|://|://$TOKEN_SECRET@|")
          git clone "$authUrl" .

          # get the current artifact version in the entando-core-bom pom.xml file
          artifactVersionInBom=$(xmlstarlet sel -N pom="http://maven.apache.org/POM/4.0.0" -t \
            -m "/pom:project/pom:properties" \
            -v "./pom:$artifactId.version" pom.xml) || true

          echo "ARTIFACT VERSION $artifactVersionInBom"

          # if the current project is a dependendcy of entando-core-bom => exit OK
          [ -z "$artifactVersionInBom" ] && echo "Dependency into the entando-core-bom not found" && exit 0

          echo "UPDATING entando-core-bom pom.xml file..."

          # TODO check if new version is newer?

          # update the version of the current project in the entando-core-bom pom.xml file
          xmlstarlet ed --inplace -P -N pom=http://maven.apache.org/POM/4.0.0 \
              --update "/pom:project/pom:properties/pom:$artifactId.version" \
              -v "$tagValue" pom.xml

          git config --global user.email ${{ secrets.GIT_USER_EMAIL }}
          git config --global user.name ${{ secrets.GIT_USER_NAME }}

          # commit
          git add pom.xml
          git commit -m "Bumped $artifactId to $tagValue"
          git push

          echo "::set-output name=TAG_VALUE::$tagValue"
          echo "::set-output name=ARTIFACT_ID::$artifactId"
      - name: "Check Dockerization needed"
        id: check-dockerization-needed
        run: |
          # if a Dockerfile is present => dockerization step is needed
          # TODO move this code to a starting step responsible to configure the entire workflow?
          if ls ./Dockerfile* 1> /dev/null 2>&1 ; then
            echo "::set-output name=DOCKERIZATION_NEEDED::true"
            echo "::set-output name=DOCKER_IMAGE::${{ secrets.DOCKER_USERNAME }}/${{ steps.entando-core-bom-update.outputs.ARTIFACT_ID }}:${{ steps.entando-core-bom-update.outputs.TAG_VALUE }}"
          else
            eho "NO DOCKER FILE DETECTED"
          fi
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.check-dockerization-needed.outputs.DOCKER_IMAGE }}
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
