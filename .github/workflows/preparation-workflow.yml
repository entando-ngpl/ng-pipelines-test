# This workflow will prepare every thing required to proceed with a PR
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Preparation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]

jobs:
  prepare:
    env:
      CLONE_URL: ${{ github.event.pull_request.base.repo.clone_url }}
#      REPOSITORY_URL: ${{ github.repository }} #" entando-ngpl/ng-pipelines-test",
      BRANCH_NAME: ${{ github.head_ref }}
    runs-on: ubuntu-latest
    steps:
#      - name: Dump GitHub context
#        env:
#          GITHUB_CONTEXT: ${{ toJson(github) }}
#        run: echo "$GITHUB_CONTEXT"
      - name: "Checkout"
        env:
          TOKEN_SECRET: ${{ secrets.TOKEN }}
        run: |
          ### BUILD AND USE THE RIGHT URL
          authUrl=$(echo "$CLONE_URL" | sed "s|://|://$TOKEN_SECRET|")
          echo "################ $authUrl"
          git clone "$authUrl" repo_folder
#          git clone "https://$TOKEN_SECRET@github.com/entando-ngpl/ng-pipelines-test.git" repo_folder
          cd repo_folder
          git config --global user.email "cicd@entando.com"
          git config --global user.name "firegloves"
          git config pull.rebase false
          git checkout "$BRANCH_NAME"
          git pull
      - name: "Guard file update"
        if: github.pull_request.state == 'open'
        run: |
          cd repo_folder
          hash=$(sha256sum<<<"${GITHUB_REF}")
          echo "########## $hash"
          echo "$hash" > guard
          # ---- add existence check
          git add guard
          echo "####### PRE COMMIT"
          git commit guard -m 'guard file update'
          echo "####### PRE PUSH"
          git push --set-upstream origin $BRANCH_NAME
          echo 'Guard file updated'
      - name: "BOM update"
        run: echo 'BOM updated'
